{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Cookiecutter Dotfiles","text":"<p>Cookiecutter Dotfiles is a template for creating your own dotfiles repository powered by Cookiecutter.</p>"},{"location":"#what-is-a-dotfiles-repository","title":"What is a dotfiles repository?","text":"<p>Many programs (specially the ones related with software development) store their configuration in plain text files under the user's home directory. These files are called dotfiles because their names start with a dot, <code>.</code>, to indicate most of the Unix operating systems that they are hidden files.</p> <p>A dotfiles repository is a Git repository that contains all the dotfiles of a user so that they can be easily copied or linked to their target location. This repository can be used to keep track of the changes made to the dotfiles and to share them across different machines using remote Git repositories services like GitHub.</p> <p>We can extend the concept of dotfiles to include other basic scripts which can be used to install and configure the desire software in a new machine. In this way, we can automate the process of setting up a new machine.</p> <p>Explore other dotfiles repositories</p> <p>Since many developers use dotfiles repositories, you can find many examples across the web. In GitHub, you can find \"The unofficial guide to dotfiles on GitHub\", a list of dotfiles repositories and resources.</p> <p>Our template was initially inspired by the C\u0103t\u0103lin dotfiles repository, a great example of a dotfiles repository that we recommend to check.</p>"},{"location":"#how-does-this-template-work","title":"How does this template work?","text":"<p>This template is a Cookiecutter template. Cookiecutter is a command-line utility made in Python that allows you to create projects from templates by prompting you for information about your project.</p> Cookiecutter resources <ul> <li>Cookiecutter's documentation</li> <li>Cookiecutter's GitHub repository</li> </ul> <p>The idea behind this template is to provide a basic structure for a modular dotfiles repository. This means that the repository can be divided into several modules or packages, each one containing specific install and setup scripts and files to link. This way, you can easily add new modules to the repository and keep the repository organized.</p> <p>Furthermore, the template provides some scripts so that you can easily install and setup the dotfiles in a new machine with just a single command. For this, your template repository should be hosted in a remote Git repository service, e.g., GitHub.</p> Supported remote Git repositories <p>For the moment, the template only supports repositories hosted in GitHub. If you want to use another remote Git repository, you can contribute to the project. Please, refer to the Contributing section for more information.</p> <p>Refer to the Usage section to learn how to use this template.</p>"},{"location":"changelog-info/","title":"Changelog","text":""},{"location":"changelog-info/#cookiecutter-dotfiles","title":"Cookiecutter Dotfiles","text":""},{"location":"changelog-info/#022-october-20-2023","title":"0.2.2 October 20, 2023","text":"<ul> <li>Fixed #8: The setup process doesn't find the packages scripts</li> <li>Now the <code>setup.sh</code> script has execution permissions</li> </ul>"},{"location":"changelog-info/#021-september-23-2023","title":"0.2.1 September 23, 2023","text":"<ul> <li>Fixed #3: Explain in the docs that the available operations are not     <code>install</code>, <code>setup</code> and <code>symlink</code> but <code>install_package</code>, <code>setup_package</code>     and <code>symlink_package</code></li> <li>Fixed #4: Extra spaces in the LICENSE file of the template</li> <li>Fixed #5: Wrong information in the README file of the template</li> </ul>"},{"location":"changelog-info/#020-september-6-2023","title":"0.2.0 September 6, 2023","text":"<ul> <li>Remove specific <code>intall</code> and <code>bootstrap</code> scripts and use a unique order file</li> </ul>"},{"location":"changelog-info/#010-august-4-2023","title":"0.1.0 August 4, 2023","text":"<ul> <li>Initial release</li> </ul>"},{"location":"contributing-info/","title":"Contributing","text":"<p>Have you found a bug or have a feature request? Please open a new issue. We have some issue templates to help you out and make sure we have all the information we need to help you out. Remember to follow the Code of Conduct when opening an issue or contributing to this project in any way.</p> <p>Warning</p> <p>We are working on a contribution guide. For the moment, we have created some issue templates that may be useful to report issues or feature requests. However, we have habilitated the option to report any issue without a template if you think it is necessary (even though we recomment to fit your issue in one of the templates).</p>"},{"location":"contributing-info/#creating-a-new-issue","title":"Creating a new issue","text":""},{"location":"contributing-info/#bug-with-template-generation","title":"Bug with template generation","text":""},{"location":"contributing-info/#bug-with-repository-behaviour","title":"Bug with repository behaviour","text":""},{"location":"contributing-info/#feature-request","title":"Feature request","text":""},{"location":"contributing-info/#ask-a-question","title":"Ask a question","text":""},{"location":"contributing-info/#contributing-to-the-project","title":"Contributing to the project","text":""},{"location":"contributing-info/#creating-a-reproduction","title":"Creating a reproduction","text":""},{"location":"contributing-info/#creating-a-pull-request","title":"Creating a pull request","text":""},{"location":"license-info/","title":"License","text":"<p>This project is licensed by Mario Vago Marzal under the terms of the MIT License:</p> <pre><code>MIT License\n\nCopyright (c) 2023 [Mario Vago Marzal]\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n</code></pre> <p>Template license</p> <p>The LICENSE file in the <code>{{cookiecutter.project_slug}}</code> directory is part of the template and does not affect the license of the project itself.</p>"},{"location":"usage/","title":"Usage","text":"<p>In this section we will explain how to generate a new dotfiles repository using the template. We will also explain how to add your own dotfiles to the repository and how to use it for setting up a new system.</p>"},{"location":"usage/#requirements","title":"Requirements","text":"<p>For using the template you need to have installed Python 3.7 or higher and Cookiecutter. Once you have Python installed in your system, you can install Cookiecutter with <code>pip</code>:</p> <pre><code>pip install cookiecutter\n</code></pre> <p>Preferably, you should install Cookiecutter 2.2.0 or higher. However, any version of Cookiecutter 2.x should work.</p> <p>For more details about the installation, please refer to the Cookiecutter's documentation.</p> <p>With Cookiecutter installed, you can create a new dotfiles repository by running the following command:</p> GeneralRecommended <pre><code>cookiecutter -o &lt;output_dir&gt; gh:mariovagomarzal/cookiecutter-dotfiles\n</code></pre> <pre><code>cookiecutter -o $HOME/Projects gh:mariovagomarzal/cookiecutter-dotfiles\n</code></pre> <p>Replace <code>&lt;output_dir&gt;</code> with the path where you want to create the repository. If you don't specify the output directory, Cookiecutter will create the repository in the current working directory.</p> <p>Dotfiles repository location</p> <p>We recommend generating the repository in a <code>Projects</code> directory under your home directory. Make sure, in any case, that you type the right paths when prompted by Cookiecutter.</p>"},{"location":"usage/#project-generation-options","title":"Project generation options","text":"<p>When you run the command above, Cookiecutter will ask you for some information about your project. These are the options you will be prompted, what they are for and their default values:</p> <code>project_slug</code> <p>The name of the directory where the repository will be created. The default value is <code>dotfiles</code>.</p> <code>author</code> <p>Your name. The default value is <code>Your Name</code>.</p> <code>github_username</code> <p>Your GitHub username. The default value is <code>your_github_username</code>.</p> <code>github_repo</code> <p>The name of the GitHub repository. The default value is <code>dotfiles</code>.</p> <code>default_branch</code> <p>The name of the default branch. The setup process will search remote files in this branch. The default value is <code>main</code>.</p> <code>dotfiles_dir</code> <p>The absolute path to the directory where the dotfiles will be cloned and, therefore, where the setup process will search for the dotfiles. The default value is <code>$HOME/Projects/dotfiles</code>.</p> <code>license</code> <p>The public license of the repository. The available options are <code>MIT</code>, <code>Apache-2.0</code> and <code>The-Unlicense</code>. The default value is <code>MIT</code>.</p> <code>macos_support</code> <p>Whether to include macOS support or not. The default value is <code>yes</code>.</p> <code>linux_support</code> <p>Whether to include Linux support or not. The default value is <code>yes</code>.</p> <p>Using default options</p> <p>When prompted for an option, you can press the <code>Enter</code> key to use the default value. Also, you can use configuration files to set the default values for some options. For more information, please refer to the Cookiecutter's documentation.</p> <p>Here's an example of the output of the command:</p> Default optionsmacOSLinux <pre><code>project_slug [dotfiles]:\nauthor [Your Name]: John Doe\ngithub_username [your_github_username]: johndoe\ngithub_repo [dotfiles]: \u21a9\ndefault_branch [main]: \u21a9\ndotfiles_dir [$HOME/Projects/dotfiles]: \u21a9\nSelect license:\n1 - MIT\n2 - Apache-2.0\n3 - The-Unlicense\nChoose from 1, 2, 3 [1]: \u21a9\nSelect macos_support:\n1 - yes\n2 - no\nChoose from 1, 2 [1]: \u21a9\nSelect linux_support:\n1 - yes\n2 - no\nChoose from 1, 2 [1]: \u21a9\n</code></pre> <pre><code>project_slug [dotfiles]:\nauthor [Your Name]: John Doe\ngithub_username [your_github_username]: johndoe\ngithub_repo [dotfiles]: \u21a9\ndefault_branch [main]: \u21a9\ndotfiles_dir [$HOME/Projects/dotfiles]: \u21a9\nSelect license:\n1 - MIT\n2 - Apache-2.0\n3 - The-Unlicense\nChoose from 1, 2, 3 [1]: \u21a9\nSelect macos_support:\n1 - yes\n2 - no\nChoose from 1, 2 [1]: 1\nSelect linux_support:\n1 - yes\n2 - no\nChoose from 1, 2 [1]: 2\n</code></pre> <pre><code>project_slug [dotfiles]:\nauthor [Your Name]: John Doe\ngithub_username [your_github_username]: johndoe\ngithub_repo [dotfiles]: \u21a9\ndefault_branch [main]: \u21a9\ndotfiles_dir [$HOME/Projects/dotfiles]: \u21a9\nSelect license:\n1 - MIT\n2 - Apache-2.0\n3 - The-Unlicense\nChoose from 1, 2, 3 [1]: \u21a9\nSelect macos_support:\n1 - yes\n2 - no\nChoose from 1, 2 [1]: 2\nSelect linux_support:\n1 - yes\n2 - no\nChoose from 1, 2 [1]: 1\n</code></pre> <p>Supported operating systems</p> <p>As you can see, for the moment only macOS and Linux based systems are supported. You can implement your dotfiles to work either on macOS or Linux, or both.</p> <p>The operating system is automatically detected by the setup process. If you want to know which operating system will be used on your machine, you can run the following command in your terminal:</p> <pre><code>echo $OSTYPE\n</code></pre> <p>If the output looks like <code>\"darwin\"*</code>, you are using macOS. If it looks like <code>\"linux-gnu\"*</code>, you are using Linux.</p>"},{"location":"usage/#project-structure","title":"Project structure","text":"<p>When a project is generated, the following directory structure is created (depending on the OS option you chose):</p> Default optionsmacOSLinux <pre><code>dotfiles/\n\u251c\u2500\u2500 LICENSE\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 linux_order.sh\n\u251c\u2500\u2500 macos_order.sh\n\u251c\u2500\u2500 common/\n\u251c\u2500\u2500 linux/\n\u251c\u2500\u2500 macos/\n\u2514\u2500\u2500 src/\n    \u251c\u2500\u2500 bootstrap.sh\n    \u251c\u2500\u2500 install.sh\n    \u251c\u2500\u2500 setup.sh\n    \u2514\u2500\u2500 utils.sh\n</code></pre> <pre><code>dotfiles/\n\u251c\u2500\u2500 LICENSE\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 macos_order.sh\n\u251c\u2500\u2500 common/\n\u251c\u2500\u2500 macos/\n\u2514\u2500\u2500 src/\n    \u251c\u2500\u2500 bootstrap.sh\n    \u251c\u2500\u2500 install.sh\n    \u251c\u2500\u2500 setup.sh\n    \u2514\u2500\u2500 utils.sh\n</code></pre> <pre><code>dotfiles/\n\u251c\u2500\u2500 LICENSE\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 linux_order.sh\n\u251c\u2500\u2500 common/\n\u251c\u2500\u2500 linux/\n\u2514\u2500\u2500 src/\n    \u251c\u2500\u2500 bootstrap.sh\n    \u251c\u2500\u2500 install.sh\n    \u251c\u2500\u2500 setup.sh\n    \u2514\u2500\u2500 utils.sh\n</code></pre> <p>In the next section we will explain how to add files to create your own dotfiles repository.</p>"},{"location":"usage/#preparing-your-dotfiles","title":"Preparing your dotfiles","text":"<p>This dotfiles repository is based on a modular structure. Each module consists of a directory inside the <code>common</code>, <code>linux</code> or <code>macos</code> directory. Inside this custom directory (which we will call module or package) you can add a <code>install.sh</code> script, a <code>setup.sh</code> script and/or a <code>symlinks</code> directory. We will explain the purpose of each of these files in the following sections.</p> <p>If a package has different contents for macOS and Linux, you should add it either to the <code>macos</code> or <code>linux</code> directory, respectively. If a package has the same contents indistinctly for macOS and Linux, you can add it to the <code>common</code> directory. When setting up your dotfiles, the process will search for the package in the <code>macos</code> or <code>linux</code> directory first, and if it doesn't find it, it will search for it in the <code>common</code> directory.</p>"},{"location":"usage/#the-setup-process","title":"The setup process","text":"<p>For setting up a new machine using this dotfiles repository, you need to run the <code>setup.sh</code> bash script. There are two ways of running this script that we will discuss later in the \"Using Git and GitHub to manage your dotfiles\" section.</p> <p>The <code>setup.sh</code> script will do the following:</p> <ol> <li>Ask for sudo permissions, even if the user is already root. This doesn't     mean that the whole script will be run as root, but since many packages     require sudo permissions to be installed, it is better to ask for them     at the beginning. The password will be stored and used if needed, so     you don't need to enter it again.</li> <li>Prepare the system for the setup process. In macOS systems, this means     installing the Xcode Command Line Tools if they are not installed. In     Linux systems, this means installing the <code>git</code> package if it is not     installed. In both cases, the script will also clone the dotfiles if it     is not found in the specified directory (by default,     <code>$HOME/Projects/dotfiles</code>).</li> <li>Run the order script (<code>macos_order.sh</code> or <code>linux_order.sh</code>) to get the     order in which the packages have to be installed and/or configured. We     will explain how to edit this file and what to put in the packages in     the next sections.</li> </ol> <p>Sudo permissions</p> <p>Do not run the <code>setup.sh</code> script with <code>sudo</code>. The script will ask for sudo permissions at the beginning and will use them when needed. That is because some packages like <code>brew</code> do not allow to be run as root, but, in some steps, it may ocasionaly need sudo permissions.</p> <p>Let's see how to add the files and what to put in them. For that, let's assume that we want to add a package called <code>my_package</code> to our dotfiles repository that works on both macOS and Linux. So, we will have to create a directory called <code>my_package</code> inside the <code>common</code> directory.</p> <p>Not all files are required</p> <p>Note that not all the packages need to have all the files. For example, if you don't need to create symlinks, you don't need to create a <code>symlink</code> directory. We will talk about how to skip the execution of the scripts in the next sections.</p>"},{"location":"usage/#the-installsh-script","title":"The <code>install.sh</code> script","text":"<p>With the <code>my_package</code> directory created, we can add the <code>install.sh</code> bash script. This script should contain only the necessary commands to install the package (or, optionally, to check first if the package is already installed).</p> <p>Make sure the script is a bash script</p> <p>The <code>install.sh</code> script must be a bash script. Add the following line at the beginning of the script to make sure it is executed with bash:</p> <pre><code>#!/bin/bash\n</code></pre> <p>Make sure you return an exit status of <code>0</code> if the installation was successful, or a different exit status if the installation failed. This is important to know if some steps of the setup process failed.</p> <p>When a <code>install.sh</code> script is executed, all the output produced is written to a log file inside the <code>logs</code> directory. The name of the log file will be of the form <code>&lt;my_package&gt;_install.log</code>.</p> <p>Let's see a general example of a <code>install.sh</code> script:</p> General structure of an <code>install.sh</code> script <pre><code>#!/bin/bash\n\nif ! command -v my_package_command &amp;&gt; /dev/null; then\n    # Command to install my_package here\n    return $? # (1)!\nelse\n    return 0\nfi\n</code></pre> <ol> <li>The <code>$?</code> variable contains the exit status of the last command executed. In this     case, it will return the exit status of the command to install <code>my_package</code>.</li> </ol> <p>If you include <code>echo</code> or <code>printf</code> commands in your script, note that the output is not going to be shown in the terminal. Instead, it will be written to a log file.</p> <p>We recommend to keep the <code>install.sh</code> scripts as simple as possible. Other operations related to the package should be done in the <code>setup.sh</code> script that we will discuss next.</p>"},{"location":"usage/#the-setupsh-script","title":"The <code>setup.sh</code> script","text":"<p>The <code>setup.sh</code> script is similar to the <code>install.sh</code> script. This script should contain the necessary commands to configure the package after it has been installed. For example, you can use this script to install plugins for a specific package or to configure the package to your needs.</p> <p>Do not use this script to link files to the system. This should be done in the <code>symlink</code> directory, as we will see in the next section.</p> <p>Similarly to the <code>install.sh</code> script, the <code>setup.sh</code> script should return an exit status of <code>0</code> if the setup was successful, or a different exit status if the setup failed. The output of this script is also written to a log file inside the <code>logs</code> directory. The name of the log file will be of the form <code>&lt;my_package&gt;_setup.log</code>.</p>"},{"location":"usage/#the-symlink-directory","title":"The <code>symlink</code> directory","text":"<p>The <code>symlink</code> directory contains the files that have to be linked to the system. This process is done just after the <code>setup.sh</code> script of the package is executed. The files in this folder will be linked to the same path in the system relative to the <code>$HOME</code> directory. For example, if you have a file calle <code>.my_file</code> in the <code>symlinks</code> directory, it will be linked to <code>$HOME/.my_file</code>.</p> <p>But there's more. You can also create directories inside the <code>symlink</code> directory and put files inside them. This files will be linked to the same path in the system relative to the <code>$HOME</code> directory, but inside the directory you created. Intermediately directories will be created if they don't exist.</p> <p>Let's see a brief example:</p> Example of the <code>symlink</code> directory <p>Suppose you have the following directory structure under the <code>my_package</code> directory:</p> <pre><code>symlink/\n\u251c\u2500\u2500 .my_file\n\u2514\u2500\u2500 my_directory\n    \u2514\u2500\u2500 my_other_file\n</code></pre> <p>Let's compare the <code>$HOME</code> directory before and after the symlinks are created:</p> BeforeAfter <pre><code>$HOME/\n\u251c\u2500\u2500 .my_file\n\u2514\u2500\u2500 ...\n</code></pre> <pre><code>$HOME/\n\u251c\u2500\u2500 .my_file -&gt; /path/to/dotfiles/my_package/symlink/.my_file\n\u251c\u2500\u2500 my_directory\n\u2502    \u2514\u2500\u2500 my_other_file -&gt; /path/to/dotfiles/my_package/symlink/my_directory/my_other_file\n\u2514\u2500\u2500 ...\n</code></pre>"},{"location":"usage/#the-order-files","title":"The order files","text":"<p>Once we have created all the packages we want to add to our dotfiles repository, we have to tell the setup process in which order they have to be installed and configured. For that, we have to edit the <code>macos_order.sh</code> and/or <code>linux_order.sh</code> files. The syntax of these files is simple. Each line contains the operation we want to perform and the package we want to perform it on. The operation can be either <code>install_package</code>, <code>setup_package</code> or <code>symlink_package</code>. The package must be a directory inside the <code>common</code>, <code>macos</code> or <code>linux</code> directory.</p> <p>Let's see an example of the order files:</p> Example of the order files <p>Let's suppose we have created a full <code>my_package</code>. Then, we can add the following lines to the <code>macos_order.sh</code> and/or <code>linux_order.sh</code> files:</p> macOSLinux <pre><code>#!bin/bash\n# Order file for a macOS setup\n\ninstall_package my_package\nsetup_package my_package\nsymlink_package my_package\n</code></pre> <pre><code>#!bin/bash\n# Order file for a Linux setup\n\ninstall_package my_package\nsetup_package my_package\nsymlink_package my_package\n</code></pre> <p>This will will run the <code>install.sh</code> script of <code>my_package</code>, then the <code>setup.sh</code> script and finally it will create the symlinks. This is natural order of the setup process. However, you can skip any of these steps if you want or even mix operations of different packages.</p>"},{"location":"usage/#using-git-and-github-to-manage-your-dotfiles","title":"Using Git and GitHub to manage your dotfiles","text":"<p>The idea of the template is to use Git and GitHub to manage your dotfiles. For that, you will have to initialize a Git repository in the root directory of your dotfiles repository. Simply run the following command:</p> <pre><code>git init\n</code></pre> <p>A <code>.gitignore</code> file is already provided in the template. This file ignores the <code>logs</code> directory. Also a <code>README.md</code> file is provided with some basic information about the repository. A <code>LICENSE</code> file is also provided with the license you chose when creating the repository.</p> <p>Now you can add the files you want to track to the repository and commit them. Make sure you commit \"stable\" versions to the branch you specified as default when creating the repository.</p> <p>Tip</p> <p>We recommend to use Calendar Versioning to version your dotfiles. This is a versioning scheme that uses the date as the version number. Tag your commits on the default branch with this version numbers.</p> <p>To share your dotfiles with other people and to be able to install them in other machines, you will have to push your repository to GitHub. For that, you will have to create a remote repository in GitHub and push your local repository to it. Make sure the user and the repository name are the same as the ones you specified when creating the repository.</p> <pre><code>git remote add origin https://github.com/&lt;github_username&gt;/&lt;github_repo&gt;.git\ngit push --set-upstream origin &lt;default_branch&gt;\n</code></pre> Git and GitHub documentation <p>If you are not familiar with Git and GitHub, you can check the following links:</p> <ul> <li>Git documentation</li> <li>GitHub documentation</li> </ul> <p>To setup your new machine using your dotfiles, you can manually clone the repository in the path you specified when creating the repository (i.e. <code>dotfiles_dir</code>). Then, you can run the <code>setup.sh</code> script with the following command:</p> <pre><code>bash -c &lt;dotfiles_dir&gt;/src/setup.sh\n</code></pre> <p>However, this process can be skipped if you use the following command:</p> <pre><code>bash -c \"$(curl -fsSL https://raw.githubusercontent.com/&lt;github_username&gt;/&lt;github_repo&gt;/&lt;default_branch&gt;/src/setup.sh)\"\n</code></pre> <p>Public repository</p> <p>For the moment, the template is designed to work with public repositories. If you want to use a private repository, you can contribute to the project.</p>"}]}